import React, { useState, useRef, useEffect } from 'react';
import './App.css';

function App() {
  const [message, setMessage] = useState('');
  const [chatHistory, setChatHistory] = useState([]);
  const [isLoading, setIsLoading] = useState(false);
  const inputRef = useRef(null);

  const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:3001/api';

  useEffect(() => {
    if (!isLoading) {
      inputRef.current?.focus();
    }
  }, [isLoading]);

  const sendMessage = async () => {
    if (!message.trim()) return; // Don't send empty messages

    const newMessage = { sender: 'user', text: message, type: 'text' }; // Add type for consistency
    setChatHistory(prev => [...prev, newMessage]); // Add user message to UI
    setMessage(''); // Clear input field
    setIsLoading(true);

    try {
      // --- Send message to backend API ---
      const response = await fetch(`${API_URL}/chat`, { // Use the API_URL variable
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ message: newMessage.text }), // Send only the text part
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || `HTTP error! status: ${response.status}`);
      }

      const data = await response.json(); // Expects { assistantResponse: '...', imageBase64: '...' or null }

      // --- Add assistant response or image to UI ---
      let newAssistantEntry = null;
      if (data.imageBase64) {
        // Create an image entry
        newAssistantEntry = {
          sender: 'assistant',
          type: 'image',
          imageSrc: `data:image/png;base64,${data.imageBase64}` // Create data URL
        };
      } else if (data.assistantResponse) {
        // Create a text entry
        newAssistantEntry = {
          sender: 'assistant',
          type: 'text',
          text: data.assistantResponse
        };
      } else {
         // Handle cases where the backend might return neither (error or unexpected)
         newAssistantEntry = {
             sender: 'assistant',
             type: 'text',
             text: 'Received an empty or unexpected response from the assistant.'
         };
      }

      setChatHistory(prev => [...prev, newAssistantEntry]);

    } catch (error) {
      console.error("Failed to send message:", error);
      const errorMessage = { sender: 'assistant', type: 'text', text: `Error: ${error.message}` };
      setChatHistory(prev => [...prev, errorMessage]); // Show error in chat
    } finally {
      setIsLoading(false);
    }
  };

  const handleInputChange = (event) => {
    setMessage(event.target.value);
  };

  const handleKeyPress = (event) => {
    if (event.key === 'Enter' && !isLoading) {
      sendMessage();
    }
  };

  return (
    <div className="App">
      <header className="App-header">
        <h1>GPT-4o Chatbot</h1>
      </header>
      <div className="chat-window">
        {chatHistory.map((msg, index) => (
          <div key={index} className={`message ${msg.sender}`}>
            <p><strong>{msg.sender === 'user' ? 'You' : 'Assistant'}:</strong></p> {/* Keep the label outside conditional content */}
            {msg.type === 'image' ? (
              <img src={msg.imageSrc} alt="Generated by Assistant" style={{ maxWidth: '90%', maxHeight: '300px', marginTop: '5px', borderRadius: '8px' }} />
            ) : (
              <span style={{ whiteSpace: 'pre-wrap' }}>{msg.text}</span> // Use span and pre-wrap for text formatting
            )}
          </div>
        ))}
        {isLoading && <div className="message assistant"><p><i>Assistant is thinking...</i></p></div>}
      </div>
      <div className="input-area">
        <input
          ref={inputRef}
          type="text"
          value={message}
          onChange={handleInputChange}
          onKeyPress={handleKeyPress}
          placeholder="Type your message..."
          disabled={isLoading}
        />
        <button onClick={sendMessage} disabled={isLoading}>
          Send
        </button>
      </div>
    </div>
  );
}

export default App;
